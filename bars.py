import MetaTrader5 as mt5
import pandas as pd
import time
from datetime import datetime
import pytz

high_TIMEFRAME=[mt5.TIMEFRAME_M15,mt5.TIMEFRAME_M30,mt5.TIMEFRAME_H1,mt5.TIMEFRAME_H4]
NUM_BARZ=int(200)
TIMEFRAME=mt5.TIMEFRAME_H4
START_POS=int(0)
SYMBOL="XAUUSD"
v=int(1)
counterHigh={"XAUUSD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"EURUSD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"USDCAD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"USDJPY":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"AUDCAD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}}
xau_DictHigh={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
eur_DictHigh={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
jpy_DictHigh={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
cad_DictHigh={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
aud_DictHigh={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}


# LOW PRICE DICTIONARY
# counterHigh value dictionary
counterLow={"XAUUSD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"EURUSD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"USDCAD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"USDJPY":{15:int(0),30:int(0),16385:int(0),16388:int(0)}
            ,"AUDCAD":{15:int(0),30:int(0),16385:int(0),16388:int(0)}}
            
xau_DictLow={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
eur_DictLow={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
jpy_DictLow={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
cad_DictLow={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}
aud_DictLow={1:{15:[],30:[],16385:[],16388:[]},
             2:{15:[],30:[],16385:[],16388:[]},
             3:{15:[],30:[],16385:[],16388:[]},
             4:{15:[],30:[],16385:[],16388:[]},
             5:{15:[],30:[],16385:[],16388:[]},
             6:{15:[],30:[],16385:[],16388:[]},
             7:{15:[],30:[],16385:[],16388:[]},
             8:{15:[],30:[],16385:[],16388:[]},
             9:{15:[],30:[],16385:[],16388:[]},
             10:{15:[],30:[],16385:[],16388:[]},
             11:{15:[],30:[],16385:[],16388:[]},
             12:{15:[],30:[],16385:[],16388:[]}}


def conn():
    # intialise mt5
    if not mt5.initialize():
        print(f"The Initialisation error is {mt5.last_error()}")
    # login credentials
    account=int(810414810)
    password="Marichu12"
    server="EGMSecurities-Live"
    # login scredentials
    log=mt5.login(account,password,server)
    if not log:
        print(f"The login error was {mt5.last_error()}")
def startTest(from_date,to_date,Siganly):
    bars=mt5.copy_rates_range(SYMBOL,Siganly,from_date,to_date)
    # create a dataframe
    df=pd.DataFrame(bars)[['close','open','high','low','time']]
    # format the time column
    df["time"]=pd.to_datetime(df["time"], unit='s')
    # filter the time column
    df=df[df["time"]>"2021-05-01"]
    # create a high price dataframe if data frame is not empty
    if df.empty != True:
        highPrice=df[df["close"] == df["close"].max()]
        HighPrice=highPrice.iloc[-1]["close"]
        lowPrice=df[df["close"] == df["close"].min()]
        # print(HighPrice)
        highP_array[x][Siganly].append(HighPrice)
        LowPrice=lowPrice.iloc[-1]["close"]
        lowP_array[x][Siganly].append(LowPrice)        
        print(f"HIGH ARRAY IS {highP_array}")
        print(f"LOW ARRAY {lowP_array}")
    # get the highest price in an array
    
    
def main():
    conn()
    # startTest(from_date=datetime(2022,5,7),to_date=datetime(2022,5,9))
    while True:
      for s in high_TIMEFRAME:
        global S
        S=s
        global v
        global x
        v=v+1
        x=int(5)
        if v >29:
            x=x+1
            v= int(1)
            if x > 11:
              x=int(1)
              v=int(1)
        from_date=datetime(2022,x,v)
        to_date=datetime(2022,x,v+1)
        print(f"From {from_date}")
        print(f"To {to_date}")
        print(f"The value of v is {v}") 
        print(f"The value of x is {x}")
        print(f" The current timeframe is {S}")
        startTest(Siganly=S,from_date=from_date,to_date=to_date)
      time.sleep(1)

main()

